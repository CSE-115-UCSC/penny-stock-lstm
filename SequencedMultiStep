{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aidanjmaldonado/penny-stock-lstm/blob/main/penny_stock.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "AB9VHvt_xNXa"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from keras.models import Sequential\n",
        "from keras.layers import LSTM, Dense, Dropout\n",
        "from keras.callbacks import EarlyStopping\n",
        "import sqlite3\n",
        "import requests\n",
        "import sys\n",
        "import pytz\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9DGRIE9XnRw8",
        "outputId": "b920fe15-2796-4943-f1df-d9b911e843c0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Request to download database succeeded\n"
          ]
        }
      ],
      "source": [
        "# Download database from github repository\n",
        "historical_url = \"https://raw.githubusercontent.com/CSE-115-UCSC/penny-stock-lstm/main/historicaldata.db\"\n",
        "scrape_request = requests.get(historical_url)\n",
        "\n",
        "try:\n",
        "  # Contingent on request status\n",
        "  scrape_request = requests.get(historical_url)\n",
        "  scrape_request.raise_for_status()\n",
        "\n",
        "  # Create local database from pull, name 'historicaldata.db'\n",
        "  with open(\"historical.db\", \"wb\") as db_file:\n",
        "    db_file.write(scrape_request.content)\n",
        "\n",
        "  print(\"Request to download database succeeded\")\n",
        "\n",
        "\n",
        "except:\n",
        "  # Report failed request status\n",
        "  sys.stderr.write(\"Request to download database failed\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KApKP8mve16y",
        "outputId": "87da7f1c-6d46-4f4c-c53c-43be1e7e884d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SQlite connected with historical.db\n"
          ]
        }
      ],
      "source": [
        "# Connect to SQlite database\n",
        "try:\n",
        "  db = 'historical.db'\n",
        "  sqliteConnection = sqlite3.connect(db)\n",
        "  cursor = sqliteConnection.cursor()\n",
        "  print(f'SQlite connected with {db}')\n",
        "\n",
        "except:\n",
        "  sys.stderr.write(\"Failed to connect to database\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "M8UPeAKGe8UL"
      },
      "outputs": [],
      "source": [
        "# Gather User Input for Query\n",
        "# ticker = input(\"Enter ticker symbol: \")\n",
        "ticker = \"IAG\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "or4POn4Ye_Lw",
        "outputId": "09f20735-2635-4332-b987-19172a480513"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Success querying IAG\n"
          ]
        }
      ],
      "source": [
        "# Query {ticker(s)} from Database\n",
        "try:\n",
        "  query = f\"SELECT * FROM all_historical;\"\n",
        "  cursor.execute(query)\n",
        "  if cursor.fetchone() is None:\n",
        "    raise Exception(\"No results\")\n",
        "  print(f\"Success querying {ticker}\")\n",
        "\n",
        "except:\n",
        "  sys.stderr.write(f\"Failed to select {ticker}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 258
        },
        "id": "RInKecJXfCka",
        "outputId": "a7590041-00dd-456d-db47-88575daef988"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(549609, 10)\n",
            "['id' 'ticker' 'volume' 'volume_weighted_average' 'open' 'close' 'high'\n",
            " 'low' 'time' 'number_of_trades']\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id ticker   volume  volume_weighted_average    open  close    high     low  \\\n",
              "0   1   ACHR    269.0                   3.0307  3.0301  3.030  3.0301  3.0300   \n",
              "1   2   ACHR   2037.0                   3.0362  3.0400  3.040  3.0400  3.0350   \n",
              "2   3   ACHR    796.0                   3.0364  3.0400  3.035  3.0400  3.0350   \n",
              "3   4   ACHR   1795.0                   3.0356  3.0350  3.035  3.0400  3.0350   \n",
              "4   5   ACHR  10397.0                   3.0286  3.0350  3.025  3.0350  3.0212   \n",
              "\n",
              "            time  number_of_trades  \n",
              "0  1657643400000                 4  \n",
              "1  1657643700000                35  \n",
              "2  1657644000000                17  \n",
              "3  1657644300000                19  \n",
              "4  1657644600000                87  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c5f13633-6c04-4377-9f15-db2188e48c87\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>ticker</th>\n",
              "      <th>volume</th>\n",
              "      <th>volume_weighted_average</th>\n",
              "      <th>open</th>\n",
              "      <th>close</th>\n",
              "      <th>high</th>\n",
              "      <th>low</th>\n",
              "      <th>time</th>\n",
              "      <th>number_of_trades</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>ACHR</td>\n",
              "      <td>269.0</td>\n",
              "      <td>3.0307</td>\n",
              "      <td>3.0301</td>\n",
              "      <td>3.030</td>\n",
              "      <td>3.0301</td>\n",
              "      <td>3.0300</td>\n",
              "      <td>1657643400000</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>ACHR</td>\n",
              "      <td>2037.0</td>\n",
              "      <td>3.0362</td>\n",
              "      <td>3.0400</td>\n",
              "      <td>3.040</td>\n",
              "      <td>3.0400</td>\n",
              "      <td>3.0350</td>\n",
              "      <td>1657643700000</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>ACHR</td>\n",
              "      <td>796.0</td>\n",
              "      <td>3.0364</td>\n",
              "      <td>3.0400</td>\n",
              "      <td>3.035</td>\n",
              "      <td>3.0400</td>\n",
              "      <td>3.0350</td>\n",
              "      <td>1657644000000</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>ACHR</td>\n",
              "      <td>1795.0</td>\n",
              "      <td>3.0356</td>\n",
              "      <td>3.0350</td>\n",
              "      <td>3.035</td>\n",
              "      <td>3.0400</td>\n",
              "      <td>3.0350</td>\n",
              "      <td>1657644300000</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>ACHR</td>\n",
              "      <td>10397.0</td>\n",
              "      <td>3.0286</td>\n",
              "      <td>3.0350</td>\n",
              "      <td>3.025</td>\n",
              "      <td>3.0350</td>\n",
              "      <td>3.0212</td>\n",
              "      <td>1657644600000</td>\n",
              "      <td>87</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c5f13633-6c04-4377-9f15-db2188e48c87')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c5f13633-6c04-4377-9f15-db2188e48c87 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c5f13633-6c04-4377-9f15-db2188e48c87');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-af200902-3bc8-4572-bf74-23da48fbc756\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af200902-3bc8-4572-bf74-23da48fbc756')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-af200902-3bc8-4572-bf74-23da48fbc756 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "# Turn SQlite Database into Pandas Dataframe\n",
        "data = pd.read_sql_query(query, sqliteConnection)\n",
        "print(data.shape)\n",
        "\n",
        "# Features\n",
        "features = np.array(data.columns)\n",
        "print(features)\n",
        "\n",
        "# Display Head\n",
        "data.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "_MxXjzzSQ1b_"
      },
      "outputs": [],
      "source": [
        "# Using the column 'time' (millisecond) add a new column 'dates' with datetime\n",
        "\n",
        "dates = pd.to_datetime(data['time'], unit='ms')\n",
        "tickers = data['ticker']\n",
        "# Transform the line above into a for loop\n",
        "# dates = []\n",
        "# for i, time in enumerate(data['time']):\n",
        "#   #print the ith ticker\n",
        "#   if (i > 450000):\n",
        "#     print(data['ticker'][i])\n",
        "#   dates.append(pd.to_datetime(time, unit='ms'))\n",
        "\n",
        "# Convert to PST\n",
        "dates = dates.dt.tz_localize('UTC').dt.tz_convert('US/Pacific')\n",
        "# If you want to remove the timezone information and keep it as naive datetime in PST\n",
        "dates = dates.dt.tz_localize(None)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6p-rlX72KXur",
        "outputId": "d854bc5b-0596-49ca-cd09-f37490d61c54"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(549609, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "data.shape"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tickers.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X4SEvNWCkzJK",
        "outputId": "e5cad362-fe57-4fb4-dbd7-70a1114f229e"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(549609,)"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "WgFN1hTloOVT"
      },
      "outputs": [],
      "source": [
        "features = data[['volume', 'volume_weighted_average', 'open', 'close', 'high', 'low']].values\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Select features to use\n",
        "# Normalize features\n",
        "scaler = MinMaxScaler(feature_range=(0, 1))\n",
        "scaled_features = scaler.fit_transform(features)\n",
        "\n",
        "def create_sequences(data, sequence_length, prediction_length):\n",
        "    xs, ys = [], []\n",
        "    index = 0\n",
        "    count = 0\n",
        "    while index < len(data) - sequence_length - prediction_length + 1:\n",
        "        # Check if sequence is within a single day\n",
        "        if dates[index].date() == dates[index + sequence_length].date() and tickers[index] == tickers[index + sequence_length]:\n",
        "            # If day == 2024-05-31, print\n",
        "            # if dates[index] == \"2024-05-31\":\n",
        "            print(\"We got a sequence from\", dates[index], \"to\", dates[index + sequence_length], \"sequence-length is\", (index + sequence_length) -index)\n",
        "            xs.append(data[index:index + sequence_length])\n",
        "            ys.append(data[index + sequence_length:index + sequence_length + prediction_length, 3])\n",
        "            index += sequence_length\n",
        "            count += 1\n",
        "        else:  # Move index to the start of the next day\n",
        "            newindex = index\n",
        "            while dates[newindex].date() == dates[newindex + 1].date():\n",
        "                newindex += 1\n",
        "            newindex += 1\n",
        "            index = newindex\n",
        "    print(\"Valid days:\", count)\n",
        "    return np.array(xs), np.array(ys)\n",
        "\n",
        "# One day sequence lenght\n",
        "sequence_length = 78\n",
        "prediction_length = 78\n",
        "x, y = create_sequences(scaled_features, sequence_length, prediction_length)\n",
        "\n",
        "train_size = int(len(x) * 0.8)\n",
        "x_train, x_test = x[:train_size], x[train_size:]\n",
        "y_train, y_test = y[:train_size], y[train_size:]\n",
        "\n",
        "# Split data into train and test sets\n",
        "train_size = int(len(x) * 0.8)\n",
        "x_train, x_test = x[:train_size], x[train_size:]\n",
        "y_train, y_test = y[:train_size], y[train_size:]\n",
        "\n",
        "print(\"x_train shape:\", x_train.shape)\n",
        "print(\"y_train shape:\", y_train.shape)\n",
        "print(\"x_test shape:\", x_test.shape)\n",
        "print(\"y_test shape:\", y_test.shape)\n",
        "\n",
        "\n",
        "# Build LSTM model\n",
        "model = Sequential()\n",
        "model.add(LSTM(50, return_sequences=True, input_shape=(sequence_length, x_train.shape[2])))\n",
        "model.add(LSTM(50))\n",
        "model.add(Dense(50, activation='relu'))\n",
        "model.add(Dropout(0.2))\n",
        "model.add(Dense(prediction_length))\n",
        "\n",
        "model.compile(optimizer='adam', loss='mse')\n",
        "\n",
        "# Train the model\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
        "model.fit(x_train, y_train, epochs=100, batch_size=32, validation_split=0.1, callbacks=[early_stopping])\n",
        "\n",
        "# Evaluate the model\n",
        "model.evaluate(x_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ToUrsdh6ki-s",
        "outputId": "a193a2da-0162-401d-fba2-7bd8ac26890c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "We got a sequence from 2023-07-31 09:30:00 to 2023-07-31 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-26 09:30:00 to 2024-02-26 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-02-06 09:30:00 to 2023-02-06 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-02-07 09:30:00 to 2023-02-07 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-02-08 09:30:00 to 2023-02-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-02-09 09:30:00 to 2023-02-09 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-02-10 09:30:00 to 2023-02-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-02-14 09:30:00 to 2023-02-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-02-15 09:30:00 to 2023-02-15 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-02-24 09:30:00 to 2023-02-24 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-03-02 09:30:00 to 2023-03-02 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-03-03 09:30:00 to 2023-03-03 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-03-07 09:30:00 to 2023-03-07 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-03-08 09:30:00 to 2023-03-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-03-31 09:30:00 to 2023-03-31 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-04-03 09:30:00 to 2023-04-03 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-04-11 09:30:00 to 2023-04-11 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-04-18 09:30:00 to 2023-04-18 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-12 09:30:00 to 2023-06-12 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-21 09:30:00 to 2023-06-21 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-22 09:30:00 to 2023-06-22 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-28 09:30:00 to 2023-06-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-05 09:30:00 to 2023-07-05 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-06 09:30:00 to 2023-07-06 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-24 09:30:00 to 2023-07-24 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-25 09:30:00 to 2023-07-25 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-26 09:30:00 to 2023-07-26 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-27 09:30:00 to 2023-07-27 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-28 09:30:00 to 2023-07-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-31 09:30:00 to 2023-07-31 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-08-08 09:30:00 to 2023-08-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-08-10 09:30:00 to 2023-08-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-08-14 09:30:00 to 2023-08-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-08-15 09:30:00 to 2023-08-15 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-08-17 09:30:00 to 2023-08-17 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-08-23 09:30:00 to 2023-08-23 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-09-14 09:30:00 to 2023-09-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-09 09:30:00 to 2023-11-09 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-09 09:30:00 to 2024-02-09 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-14 09:30:00 to 2024-02-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-15 09:30:00 to 2024-02-15 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-16 09:30:00 to 2024-02-16 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-20 09:30:00 to 2024-02-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-21 09:30:00 to 2024-02-21 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-22 09:30:00 to 2024-02-22 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-23 09:30:00 to 2024-02-23 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-26 09:30:00 to 2024-02-26 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-27 09:30:00 to 2024-02-27 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-28 09:30:00 to 2024-02-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-29 09:30:00 to 2024-02-29 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-01 09:30:00 to 2024-03-01 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-04 09:30:00 to 2024-03-04 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-05 09:30:00 to 2024-03-05 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-06 09:30:00 to 2024-03-06 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-07 09:30:00 to 2024-03-07 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-08 09:30:00 to 2024-03-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-11 09:30:00 to 2024-03-11 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-12 09:30:00 to 2024-03-12 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-13 09:30:00 to 2024-03-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-14 09:30:00 to 2024-03-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-15 09:30:00 to 2024-03-15 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-18 09:30:00 to 2024-03-18 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-19 09:30:00 to 2024-03-19 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-20 09:30:00 to 2024-03-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-21 09:30:00 to 2024-03-21 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-22 09:30:00 to 2024-03-22 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-25 09:30:00 to 2024-03-25 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-26 09:30:00 to 2024-03-26 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-27 09:30:00 to 2024-03-27 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-28 09:30:00 to 2024-03-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-01 09:30:00 to 2024-04-01 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-03 09:30:00 to 2024-04-03 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-04 09:30:00 to 2024-04-04 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-05 09:30:00 to 2024-04-05 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-10 09:30:00 to 2024-04-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-15 09:30:00 to 2024-04-15 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-17 09:30:00 to 2024-04-17 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-19 09:30:00 to 2024-04-19 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-22 09:30:00 to 2024-04-22 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-23 09:30:00 to 2024-04-23 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-24 09:30:00 to 2024-04-24 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-25 09:30:00 to 2024-04-25 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-26 09:30:00 to 2024-04-26 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-29 09:30:00 to 2024-04-29 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-30 09:30:00 to 2024-04-30 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-02 09:30:00 to 2024-05-02 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-03 09:30:00 to 2024-05-03 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-06 09:30:00 to 2024-05-06 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-09 09:30:00 to 2024-05-09 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-10 09:30:00 to 2024-05-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-13 09:30:00 to 2024-05-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-14 09:30:00 to 2024-05-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-15 09:30:00 to 2024-05-15 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-16 09:30:00 to 2024-05-16 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-21 09:30:00 to 2024-05-21 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-22 09:30:00 to 2024-05-22 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-23 09:30:00 to 2024-05-23 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-28 09:30:00 to 2024-05-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-29 09:30:00 to 2024-05-29 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-31 09:30:00 to 2024-05-31 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-04 09:30:00 to 2023-12-04 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-05 09:30:00 to 2023-12-05 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-08 09:30:00 to 2023-12-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-12 09:30:00 to 2023-12-12 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-13 09:30:00 to 2023-12-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-14 09:30:00 to 2023-12-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-18 09:30:00 to 2023-12-18 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-21 09:30:00 to 2023-12-21 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-26 09:30:00 to 2023-12-26 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-27 09:30:00 to 2023-12-27 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-29 09:30:00 to 2023-12-29 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-02 09:30:00 to 2024-01-02 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-09 09:30:00 to 2024-01-09 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-10 09:30:00 to 2024-01-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-11 09:30:00 to 2024-01-11 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-12 09:30:00 to 2024-01-12 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-28 09:30:00 to 2024-02-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-04 09:30:00 to 2024-03-04 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-06 09:30:00 to 2024-03-06 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-11 09:30:00 to 2024-03-11 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-20 09:30:00 to 2024-03-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-25 09:30:00 to 2024-03-25 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2022-09-08 09:30:00 to 2022-09-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2022-09-14 09:30:00 to 2022-09-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2022-11-03 09:30:00 to 2022-11-03 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-08-29 09:30:00 to 2023-08-29 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2022-07-15 09:30:00 to 2022-07-15 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2022-07-28 09:30:00 to 2022-07-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2022-08-09 09:30:00 to 2022-08-09 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2022-08-12 09:30:00 to 2022-08-12 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-01-25 09:30:00 to 2023-01-25 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-03-01 09:30:00 to 2023-03-01 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-04-05 09:30:00 to 2023-04-05 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-04-06 09:30:00 to 2023-04-06 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-04-18 09:30:00 to 2023-04-18 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-05-09 09:30:00 to 2023-05-09 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-05-10 09:30:00 to 2023-05-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-12 09:30:00 to 2023-06-12 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-13 09:30:00 to 2023-06-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-14 09:30:00 to 2023-06-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-06 09:30:00 to 2023-07-06 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-13 09:30:00 to 2023-07-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-14 09:30:00 to 2023-07-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-20 09:30:00 to 2023-07-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-25 09:30:00 to 2023-07-25 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-31 09:30:00 to 2023-07-31 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-08-01 09:30:00 to 2023-08-01 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-08-08 09:30:00 to 2023-08-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-08-09 09:30:00 to 2023-08-09 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-08-10 09:30:00 to 2023-08-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-10-11 09:30:00 to 2023-10-11 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-10-19 09:30:00 to 2023-10-19 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-10-20 09:30:00 to 2023-10-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-08 09:30:00 to 2023-11-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-09 09:30:00 to 2023-11-09 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-10 09:30:00 to 2023-11-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-13 09:30:00 to 2023-11-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-14 09:30:00 to 2023-11-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-15 09:30:00 to 2023-11-15 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-16 09:30:00 to 2023-11-16 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-17 09:30:00 to 2023-11-17 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-21 09:30:00 to 2023-11-21 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-28 09:30:00 to 2023-11-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-08 09:30:00 to 2023-12-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-13 09:30:00 to 2023-12-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-20 09:30:00 to 2023-12-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-12 09:30:00 to 2024-01-12 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-17 09:30:00 to 2024-01-17 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-18 09:30:00 to 2024-01-18 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-19 09:30:00 to 2024-01-19 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-22 09:30:00 to 2024-01-22 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-23 09:30:00 to 2024-01-23 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-29 09:30:00 to 2024-01-29 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-31 09:30:00 to 2024-01-31 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-01 09:30:00 to 2024-02-01 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-02 09:30:00 to 2024-02-02 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-05 09:30:00 to 2024-02-05 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-07 09:30:00 to 2024-02-07 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-13 09:30:00 to 2024-02-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-14 09:30:00 to 2024-02-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-15 09:30:00 to 2024-02-15 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-20 09:30:00 to 2024-02-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-21 09:30:00 to 2024-02-21 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-22 09:30:00 to 2024-02-22 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-27 09:30:00 to 2024-02-27 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-28 09:30:00 to 2024-02-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-29 09:30:00 to 2024-02-29 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-01 09:30:00 to 2024-03-01 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-06 09:30:00 to 2024-03-06 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-13 09:30:00 to 2024-03-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-14 09:30:00 to 2024-03-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-20 09:30:00 to 2024-03-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-04 09:30:00 to 2024-04-04 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-11 09:30:00 to 2024-04-11 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-19 09:30:00 to 2024-04-19 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-25 09:30:00 to 2024-04-25 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-30 09:30:00 to 2024-04-30 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-01 09:30:00 to 2024-05-01 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-06 09:30:00 to 2024-05-06 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-08 09:30:00 to 2024-05-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-13 09:30:00 to 2024-05-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-14 09:30:00 to 2024-05-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-15 09:30:00 to 2024-05-15 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-17 09:30:00 to 2024-05-17 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-21 09:30:00 to 2024-05-21 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2022-09-14 09:30:00 to 2022-09-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2022-09-15 09:30:00 to 2022-09-15 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-03-02 09:30:00 to 2023-03-02 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-05-16 09:30:00 to 2023-05-16 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-01 09:30:00 to 2023-06-01 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-08 09:30:00 to 2023-06-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-20 09:30:00 to 2023-06-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-21 09:30:00 to 2023-06-21 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-22 09:30:00 to 2023-06-22 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-06-27 09:30:00 to 2023-06-27 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-09-06 09:30:00 to 2023-09-06 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-09-08 09:30:00 to 2023-09-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-09-20 09:30:00 to 2023-09-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-10-11 09:30:00 to 2023-10-11 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-10-13 09:30:00 to 2023-10-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-10-17 09:30:00 to 2023-10-17 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-10-23 09:30:00 to 2023-10-23 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-10-25 09:30:00 to 2023-10-25 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-06 09:30:00 to 2023-11-06 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-17 09:30:00 to 2023-11-17 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-20 09:30:00 to 2023-11-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-21 09:30:00 to 2023-11-21 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-11-28 09:30:00 to 2023-11-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-01 09:30:00 to 2023-12-01 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-06 09:30:00 to 2023-12-06 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-08 09:30:00 to 2023-12-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-15 09:30:00 to 2023-12-15 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-20 09:30:00 to 2023-12-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-10 09:30:00 to 2024-01-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-05 09:30:00 to 2024-03-05 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-17 09:30:00 to 2024-04-17 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-28 09:30:00 to 2024-02-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-27 09:30:00 to 2023-12-27 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-10 09:30:00 to 2024-01-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-28 09:30:00 to 2024-02-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-04-04 09:30:00 to 2023-04-04 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-01-27 09:30:00 to 2023-01-27 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-26 09:30:00 to 2024-01-26 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-30 09:30:00 to 2024-01-30 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-21 09:30:00 to 2024-02-21 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-12 09:30:00 to 2024-03-12 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-22 09:30:00 to 2024-02-22 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-17 09:30:00 to 2024-05-17 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-20 09:30:00 to 2024-05-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-21 09:30:00 to 2024-05-21 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-22 09:30:00 to 2024-05-22 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-23 09:30:00 to 2024-05-23 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-24 09:30:00 to 2024-05-24 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-28 09:30:00 to 2024-05-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-29 09:30:00 to 2024-05-29 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-30 09:30:00 to 2024-05-30 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-31 09:30:00 to 2024-05-31 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-05-09 09:30:00 to 2023-05-09 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-05-10 09:30:00 to 2023-05-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-24 09:30:00 to 2024-05-24 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-28 09:30:00 to 2024-05-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-30 09:30:00 to 2024-05-30 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-31 09:30:00 to 2024-05-31 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-05-05 09:30:00 to 2023-05-05 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-05-08 09:30:00 to 2023-05-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-19 09:30:00 to 2023-07-19 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-10-10 09:30:00 to 2023-10-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-07 09:30:00 to 2024-02-07 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-28 09:30:00 to 2024-02-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-20 09:30:00 to 2024-03-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-24 09:30:00 to 2024-05-24 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-01-25 09:30:00 to 2023-01-25 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-29 09:30:00 to 2024-05-29 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-29 09:30:00 to 2023-12-29 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-03-13 09:30:00 to 2024-03-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-03 09:30:00 to 2024-04-03 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-16 09:30:00 to 2024-05-16 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-20 09:30:00 to 2024-05-20 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-28 09:30:00 to 2024-05-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-29 09:30:00 to 2024-05-29 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-05-30 09:30:00 to 2024-05-30 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-08 09:30:00 to 2024-04-08 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-04-12 09:30:00 to 2024-04-12 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-01-13 09:30:00 to 2023-01-13 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2022-09-14 09:30:00 to 2022-09-14 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-08-31 09:30:00 to 2023-08-31 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-09-07 09:30:00 to 2023-09-07 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-27 09:30:00 to 2023-12-27 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-10 09:30:00 to 2024-01-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-28 09:30:00 to 2024-02-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-12-27 09:30:00 to 2023-12-27 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-01-10 09:30:00 to 2024-01-10 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2024-02-28 09:30:00 to 2024-02-28 16:00:00 sequence-length is 78\n",
            "We got a sequence from 2023-07-20 09:30:00 to 2023-07-20 16:00:00 sequence-length is 78\n",
            "Valid days: 294\n",
            "x_train shape: (235, 78, 6)\n",
            "y_train shape: (235, 78)\n",
            "x_test shape: (59, 78, 6)\n",
            "y_test shape: (59, 78)\n",
            "Epoch 1/100\n",
            "7/7 [==============================] - 6s 225ms/step - loss: 1.1320e-06 - val_loss: 1.8728e-07\n",
            "Epoch 2/100\n",
            "7/7 [==============================] - 1s 84ms/step - loss: 5.1206e-07 - val_loss: 2.2749e-07\n",
            "Epoch 3/100\n",
            "7/7 [==============================] - 1s 80ms/step - loss: 3.7809e-07 - val_loss: 1.3851e-07\n",
            "Epoch 4/100\n",
            "7/7 [==============================] - 1s 78ms/step - loss: 3.3408e-07 - val_loss: 1.9265e-07\n",
            "Epoch 5/100\n",
            "7/7 [==============================] - 1s 81ms/step - loss: 3.3655e-07 - val_loss: 1.1928e-07\n",
            "Epoch 6/100\n",
            "7/7 [==============================] - 1s 77ms/step - loss: 3.0879e-07 - val_loss: 1.3360e-07\n",
            "Epoch 7/100\n",
            "7/7 [==============================] - 1s 84ms/step - loss: 3.0440e-07 - val_loss: 1.5842e-07\n",
            "Epoch 8/100\n",
            "7/7 [==============================] - 1s 134ms/step - loss: 2.9611e-07 - val_loss: 1.0665e-07\n",
            "Epoch 9/100\n",
            "7/7 [==============================] - 1s 130ms/step - loss: 2.9845e-07 - val_loss: 1.1198e-07\n",
            "Epoch 10/100\n",
            "7/7 [==============================] - 1s 134ms/step - loss: 2.9491e-07 - val_loss: 1.6007e-07\n",
            "Epoch 11/100\n",
            "7/7 [==============================] - 1s 129ms/step - loss: 2.9895e-07 - val_loss: 1.0176e-07\n",
            "Epoch 12/100\n",
            "7/7 [==============================] - 1s 106ms/step - loss: 2.9404e-07 - val_loss: 1.9516e-07\n",
            "Epoch 13/100\n",
            "7/7 [==============================] - 1s 87ms/step - loss: 3.0895e-07 - val_loss: 1.2639e-07\n",
            "Epoch 14/100\n",
            "7/7 [==============================] - 1s 76ms/step - loss: 3.1247e-07 - val_loss: 9.4241e-08\n",
            "Epoch 15/100\n",
            "7/7 [==============================] - 1s 78ms/step - loss: 3.0874e-07 - val_loss: 1.0005e-07\n",
            "Epoch 16/100\n",
            "7/7 [==============================] - 1s 73ms/step - loss: 3.0434e-07 - val_loss: 1.1899e-07\n",
            "Epoch 17/100\n",
            "7/7 [==============================] - 1s 76ms/step - loss: 2.9448e-07 - val_loss: 1.2188e-07\n",
            "Epoch 18/100\n",
            "7/7 [==============================] - 1s 84ms/step - loss: 2.9231e-07 - val_loss: 1.4720e-07\n",
            "Epoch 19/100\n",
            "7/7 [==============================] - 1s 74ms/step - loss: 2.9698e-07 - val_loss: 1.3218e-07\n",
            "Epoch 20/100\n",
            "7/7 [==============================] - 1s 81ms/step - loss: 2.9622e-07 - val_loss: 1.0656e-07\n",
            "Epoch 21/100\n",
            "7/7 [==============================] - 1s 76ms/step - loss: 2.9189e-07 - val_loss: 1.2842e-07\n",
            "Epoch 22/100\n",
            "5/7 [====================>.........] - ETA: 0s - loss: 3.1932e-07"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gaButDJTSHG5"
      },
      "outputs": [],
      "source": [
        "# Create Prediction Stock dataset\n",
        "\n",
        "try:\n",
        "  query = f\"SELECT * FROM EVGN_Predict;\"\n",
        "  cursor.execute(query)\n",
        "  if cursor.fetchone() is None:\n",
        "    raise Exception(\"No results\")\n",
        "  print(f\"Success querying EVGN_Predict\")\n",
        "except:\n",
        "  sys.stderr.write(f\"Failed to select EVGN_Predict\")\n",
        "\n",
        "# Turn SQlite Database into Pandas Dataframe\n",
        "predict_data_whole = pd.read_sql_query(query, sqliteConnection)\n",
        "\n",
        "# Features\n",
        "features = np.array(predict_data_whole.columns)\n",
        "\n",
        "# Display Head\n",
        "predict_data_whole.head()\n",
        "\n",
        "# Split into known vs unknown, where unknown is the last 78 entries\n",
        "split_index_whole = len(predict_data_whole) - 78\n",
        "known_data_whole = predict_data_whole.iloc[:-78]\n",
        "unknown_data_whole = predict_data_whole.iloc[-78:]\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predict stock sequence for real-time stock\n",
        "\n",
        "# Select the 6 features that were used during training\n",
        "features_to_use = ['volume', 'volume_weighted_average', 'open', 'close', 'high', 'low']  # replace with actual feature names\n",
        "\n",
        "# Limit to these features\n",
        "known_data_whole = known_data_whole[features_to_use]\n",
        "unknown_data_whole = unknown_data_whole[features_to_use]\n",
        "\n",
        "# Limit our context to only the most recent day\n",
        "known_data_limited = known_data_whole[-78:]\n",
        "\n",
        "# Convert limited data to nparray for reshaping\n",
        "known_data_limited = known_data_limited.values\n",
        "\n",
        "# Reshape to match the input shape expected by the model: (1, timesteps, features)\n",
        "latest_sequence = known_data_limited.reshape(1, known_data_limited.shape[0], known_data_limited.shape[1])\n",
        "\n",
        "print(latest_sequence.shape)\n",
        "\n",
        "# Now you can make predictions\n",
        "predicted_stock_sequence = model.predict(latest_sequence)\n",
        "\n",
        "# Flatten the predicted sequence if needed\n",
        "predicted_stock_sequence = predicted_stock_sequence.flatten()\n"
      ],
      "metadata": {
        "id": "PKMFF8SWp9M4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZI07GI7IS3_I"
      },
      "outputs": [],
      "source": [
        "# Plot known in red and unkown in blue\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Create the combined index for plotting\n",
        "combined_index = np.arange(len(predict_data_whole))\n",
        "\n",
        "# Create\n",
        "plt.figure(figsize=(14, 7))\n",
        "\n",
        "# Plot\n",
        "plt.plot(combined_index, predict_data_whole['close'], label='Example \"Prediction\" Data', color='black', linewidth=3.0)\n",
        "plt.plot(combined_index[:split_index_whole], known_data_whole['close'], label='\"Known\" Data', color='cyan', linewidth=2.0, linestyle=\"--\")\n",
        "plt.plot(combined_index[split_index_whole:], unknown_data_whole['close'], label='\"Unknown\" Data', color='orange', linewidth=2.0, linestyle=\"--\")\n",
        "plt.plot(combined_index[split_index_whole:], predicted_stock_sequence, label='Model Prediction', color='purple', linewidth=2.0, linestyle=\"-\")\n",
        "\n",
        "# Format\n",
        "plt.title('Comparison of Historical, Actual, and Predicted Data')\n",
        "plt.xlabel('Time Steps')\n",
        "plt.ylabel('Stock Price')\n",
        "plt.legend()\n",
        "\n",
        "# Adjust y-axis limits based on the data range\n",
        "# plt.ylim(predict_data_whole.iloc[-200:]['close'].min() - 0.2, predict_data_whole.iloc[-200:]['close'].max() + 0.2)\n",
        "plt.xlim(len(predict_data_whole) - 200, len(predict_data_whole))  # Crop view to just the very end\n",
        "\n",
        "# Set y-tick locations with a step of 0.05\n",
        "# yticks = np.arange(min(predict_data_whole['close']) // 0.05 * 0.05, (max(predict_data_whole['close']) // 0.05 + 1) * 0.05, 0.05)\n",
        "# plt.yticks(yticks)\n",
        "\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "614XCisPYyM9"
      },
      "outputs": [],
      "source": [
        "# #predict tomorrow's price sequence\n",
        "\n",
        "# #Assuming 'x_test' contains the latest data points and 'model' is your trained model\n",
        "\n",
        "# # Prepare the latest sequence from x_test (the last available or most recent sequence)\n",
        "# latest_sequence = x_test[-1].reshape(1, x_test.shape[1], x_test.shape[2])\n",
        "\n",
        "\n",
        "# # Predict tomorrow's stock price for each 5 minute interval\n",
        "# predicted_stock_price = model.predict(latest_sequence)\n",
        "\n",
        "# # Print the predicted stock price\n",
        "# #print(\"Predicted stock price for tomorrow:\", predicted_stock_price)\n",
        "\n",
        "# #graph the historical data concatenated with the predicted data\n",
        "# # Flatten the 3D data into 2D\n",
        "# print(y_test.shape)\n",
        "# actual = [x[0] for x in y_test]\n",
        "\n",
        "# predicted = predicted_stock_price.reshape(-1)\n",
        "# # Assuming y_train and y_test are already loaded and are in the correct shape\n",
        "# historical_data = y_train.reshape(-1)[-100:]  # Last 100 points of training data for some context\n",
        "# full_actual = np.concatenate([historical_data, actual])  # Concatenate historical data with actual test data\n",
        "\n",
        "# # Create an index for predicted values to align them correctly on the x-axis\n",
        "# predicted_index = np.arange(len(historical_data), len(historical_data) + len(predicted)) + len(actual)\n",
        "# print(predicted_index)\n",
        "\n",
        "# import matplotlib.pyplot as plt\n",
        "\n",
        "# plt.figure(figsize=(14, 7))\n",
        "# plt.plot(full_actual, label='Actual Data', color='blue')\n",
        "# plt.plot(predicted_index, predicted, label='Predicted Data', color='orange')\n",
        "# plt.title('Comparison of Historical, Actual, and Predicted Data')\n",
        "# plt.xlabel('Time Steps')\n",
        "# plt.xlim(len(full_actual) - 200, len(full_actual) + 100)\n",
        "# plt.ylabel('Stock Price')\n",
        "# plt.legend()\n",
        "# plt.show()\n",
        "# print(\"hai!\", full_actual.shape, \"ho\", predicted_index.shape)\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
